diff -r libgo/go/debug/elf/elf.go ../../../.build-old/src/gcc-5.2.0/libgo/go/debug/elf/elf.go
1784a1785,1898
> // Relocation types for MIPS.
> type R_MIPS int
> 
> const (
>        R_MIPS_NONE	 	R_MIPS =	0	/* No reloc */
>        R_MIPS_16	 	R_MIPS =	1	/* Direct 16 bit */
>        R_MIPS_32	 	R_MIPS =	2	/* Direct 32 bit */
>        R_MIPS_REL32	 	R_MIPS =	3	/* PC relative 32 bit */
>        R_MIPS_26	 	R_MIPS =	4	/* Direct 26 bit shifted */
>        R_MIPS_HI16	 	R_MIPS =	5	/* High 16 bit */
>        R_MIPS_LO16	 	R_MIPS =	6	/* Low 16 bit */
>        R_MIPS_GPREL16	 	R_MIPS =	7	/* GP relative 16 bit */
>        R_MIPS_LITERAL	 	R_MIPS =	8	/* 16 bit literal entry */
>        R_MIPS_GOT16	 	R_MIPS =	9	/* 16 bit GOT entry */
>        R_MIPS_PC16	 	R_MIPS =	10	/* PC relative 16 bit */
>        R_MIPS_CALL16	 	R_MIPS =	11	/* 16 bit GOT entry for function */
>        R_MIPS_GPREL32	 	R_MIPS =	12	/* GP relative 32 bit */
>        R_MIPS_SHIFT5	 	R_MIPS =	16
>        R_MIPS_SHIFT6	 	R_MIPS =	17
>        R_MIPS_64	 	R_MIPS =	18
>        R_MIPS_GOT_DISP	 	R_MIPS =	19
>        R_MIPS_GOT_PAGE	 	R_MIPS =	20
>        R_MIPS_GOT_OFST	 	R_MIPS =	21
>        R_MIPS_GOT_HI16	 	R_MIPS =	22
>        R_MIPS_GOT_LO16	 	R_MIPS =	23
>        R_MIPS_SUB	 	R_MIPS =	24
>        R_MIPS_INSERT_A	 	R_MIPS =	25
>        R_MIPS_INSERT_B	 	R_MIPS =	26
>        R_MIPS_DELETE	 	R_MIPS =	27
>        R_MIPS_HIGHER	 	R_MIPS =	28
>        R_MIPS_HIGHEST	 	R_MIPS =	29
>        R_MIPS_CALL_HI16  	R_MIPS =	30
>        R_MIPS_CALL_LO16  	R_MIPS =	31
>        R_MIPS_SCN_DISP	 	R_MIPS =	32
>        R_MIPS_REL16	 	R_MIPS =	33
>        R_MIPS_ADD_IMMEDIATE 	R_MIPS =	34
>        R_MIPS_PJUMP	 	R_MIPS =	35
>        R_MIPS_RELGOT	 	R_MIPS =	36
>        R_MIPS_JALR	 	R_MIPS =	37
>        R_MIPS_TLS_DTPMOD32 	R_MIPS =	38	/* Module number 32 bit */
>        R_MIPS_TLS_DTPREL32 	R_MIPS =	39	/* Module-relative offset 32 bit */
>        R_MIPS_TLS_DTPMOD64 	R_MIPS =	40	/* Module number 64 bit */
>        R_MIPS_TLS_DTPREL64 	R_MIPS =	41	/* Module-relative offset 64 bit */
>        R_MIPS_TLS_GD	   	R_MIPS =	42	/* 16 bit GOT offset for GD */
>        R_MIPS_TLS_LDM	   	R_MIPS =	43	/* 16 bit GOT offset for LDM */
>        R_MIPS_TLS_DTPREL_HI16 	R_MIPS =	44	/* Module-relative offset, high 16 bits */
>        R_MIPS_TLS_DTPREL_LO16 	R_MIPS =	45	/* Module-relative offset, low 16 bits */
>        R_MIPS_TLS_GOTTPREL    	R_MIPS =	46	/* 16 bit GOT offset for IE */
>        R_MIPS_TLS_TPREL32     	R_MIPS =	47	/* TP-relative offset, 32 bit */
>        R_MIPS_TLS_TPREL64     	R_MIPS =	48	/* TP-relative offset, 64 bit */
>        R_MIPS_TLS_TPREL_HI16  	R_MIPS =	49	/* TP-relative offset, high 16 bits */
>        R_MIPS_TLS_TPREL_LO16  	R_MIPS =	50	/* TP-relative offset, low 16 bits */
>        R_MIPS_GLOB_DAT	      	R_MIPS =	51
>        R_MIPS_COPY	      	R_MIPS =	126
>        R_MIPS_JUMP_SLOT       	R_MIPS =  	127
> )
> 
> var rmipsStrings = []intName {  
>        { 0 , "R_MIPS_NONE" },
>        { 1 , "R_MIPS_16" },
>        { 2 , "R_MIPS_32" },
>        { 3 , "R_MIPS_REL32" },
>        { 4 , "R_MIPS_26" },
>        { 5 , "R_MIPS_HI16" },
>        { 6 , "R_MIPS_LO16" },
>        { 7 , "R_MIPS_GPREL16" },
>        { 8 , "R_MIPS_LITERAL" },
>        { 9 , "R_MIPS_GOT16" },
>        { 10 , "R_MIPS_PC16" },
>        { 11 , "R_MIPS_CALL16" },
>        { 12 , "R_MIPS_GPREL32" },
>        { 16 , "R_MIPS_SHIFT5" },
>        { 17 , "R_MIPS_SHIFT6" },
>        { 18 , "R_MIPS_64" },
>        { 19 , "R_MIPS_GOT_DISP" },
>        { 20 , "R_MIPS_GOT_PAGE" },
>        { 21 , "R_MIPS_GOT_OFST" },
>        { 22 , "R_MIPS_GOT_HI16" },
>        { 23 , "R_MIPS_GOT_LO16" },
>        { 24 , "R_MIPS_SUB" },
>        { 25 , "R_MIPS_INSERT_A" },
>        { 26 , "R_MIPS_INSERT_B" },
>        { 27 , "R_MIPS_DELETE" },
>        { 28 , "R_MIPS_HIGHER" },
>        { 29 , "R_MIPS_HIGHEST" },
>        { 30 , "R_MIPS_CALL_HI16" },
>        { 31 , "R_MIPS_CALL_LO16" },
>        { 32 , "R_MIPS_SCN_DISP" },
>        { 33 , "R_MIPS_REL16" },
>        { 34 , "R_MIPS_ADD_IMMEDIATE" },
>        { 35 , "R_MIPS_PJUMP" },
>        { 36 , "R_MIPS_RELGOT" },
>        { 37 , "R_MIPS_JALR" },
>        { 38 , "R_MIPS_TLS_DTPMOD32" },
>        { 39 , "R_MIPS_TLS_DTPREL32" },
>        { 40 , "R_MIPS_TLS_DTPMOD64" },
>        { 41 , "R_MIPS_TLS_DTPREL64" },
>        { 42 , "R_MIPS_TLS_GD" },
>        { 43 , "R_MIPS_TLS_LDM" },
>        { 44 , "R_MIPS_TLS_DTPREL_HI16" },
>        { 45 , "R_MIPS_TLS_DTPREL_LO16" },
>        { 46 , "R_MIPS_TLS_GOTTPREL" },
>        { 47 , "R_MIPS_TLS_TPREL32" },
>        { 48 , "R_MIPS_TLS_TPREL64" },
>        { 49 , "R_MIPS_TLS_TPREL_HI16" },
>        { 50 , "R_MIPS_TLS_TPREL_LO16" },
>        { 51 , "R_MIPS_GLOB_DAT" },
>        { 126 , "R_MIPS_COPY" },
>        { 127 , "R_MIPS_JUMP_SLOT" },
> }
> 
> func (i R_MIPS) String() string   { return stringName(uint32(i), rmipsStrings, false) }
> func (i R_MIPS) GoString() string { return stringName(uint32(i), rmipsStrings, true) }
> 
diff -r libgo/go/debug/elf/file.go ../../../.build-old/src/gcc-5.2.0/libgo/go/debug/elf/file.go
543a544,549
> 	if f.Class == ELFCLASS64 && f.Machine == EM_AARCH64 {
> 		return f.applyRelocationsARM64(dst, rels)
> 	}
> 	if f.Class == ELFCLASS64 && f.Machine == EM_MIPS {
> 		return f.applyRelocationsMIPS64(dst, rels)
> 	}
808a815,870
> func (f *File) applyRelocationsMIPS64(dst []byte, rels []byte) error {
> 	// 24 is the size of Rela64.
> 	if len(rels)%24 != 0 {
> 		return errors.New("length of relocation section is not a multiple of 24")
> 	}
> 
> 	symbols, _, err := f.getSymbols(SHT_SYMTAB)
> 	if err != nil {
> 		return err
> 	}
> 
> 	b := bytes.NewReader(rels)
> 	var rela Rela64
> 
> 	for b.Len() > 0 {
> 		binary.Read(b, f.ByteOrder, &rela)
>                /* In little-endian objects, r_info isn't really a
>                  64-bit little-endian value: it has a 32-bit
>                  little-endian symbol index followed by four
>                  individual byte fields.  Reorder INFO
>                  accordingly.  MIPS64 only */
>                 rela.Info = (((rela.Info & 0xffffffff) << 32) | ((rela.Info >> 56) & 0xff) | ((rela.Info >> 40) & 0xff00) | ((rela.Info >> 24) & 0xff0000) | ((rela.Info >> 8) & 0xff000000));
> 
> 		symNo := rela.Info & 0xffffffff
> 		t := R_MIPS(rela.Info & 0xffff)
> 
> 		if symNo == 0 || symNo > uint64(len(symbols)) {
> 			continue
> 		}
> 		sym := &symbols[symNo-1]
> 		if SymType(sym.Info&0xf) != STT_SECTION {
> 			// We don't handle non-section relocations for now.
> 			continue
> 		}
> 
> 		// There are relocations, so this must be a normal
> 		// object file, and we only look at section symbols,
> 		// so we assume that the symbol value is 0.
> 
> 		switch t {
> 		case R_MIPS_64:
> 			if rela.Off+8 >= uint64(len(dst)) || rela.Addend < 0 {
> 				continue
> 			}
> 			f.ByteOrder.PutUint64(dst[rela.Off:rela.Off+8], uint64(rela.Addend))
> 		case R_MIPS_32:
> 			if rela.Off+4 >= uint64(len(dst)) || rela.Addend < 0 {
> 				continue
> 			}
> 			f.ByteOrder.PutUint32(dst[rela.Off:rela.Off+4], uint32(rela.Addend))
> 		}
> 	}
> 
> 	return nil
> }
> 
831c893
< 	if rela != nil && rela.Type == SHT_RELA && (f.Machine == EM_X86_64 || f.Machine == EM_AARCH64 || f.Machine == EM_PPC || f.Machine == EM_PPC64 || f.Machine == EM_S390) {
---
> 	if rela != nil && rela.Type == SHT_RELA && (f.Machine == EM_X86_64 || f.Machine == EM_AARCH64 || f.Machine == EM_PPC || f.Machine == EM_PPC64 || f.Machine == EM_S390 || f.Machine == EM_MIPS) {
